dat <- fromJSON(dat)
# Fetch data
dat <- GET(url = root, path = path, query = query)
# Extract content
dat <- content(dat, as = "text", encoding = "UTF-8")
dat <- fromJSON(dat)
query
# query handle
if (length(query) == 0) query <- NULL
query
# Fetch data
dat <- GET(url = root, path = path, query = query)
#'
#'
#' @importFrom jsonlite fromJSON
#' @importFrom httr GET content
#' @importFrom curl nslookup
#'
#' @example
#' path <- "defs/intervals?format=csv&timescale="
#' query <- "International Ages"
#' fetch_macrostrat(path = "defs/timescales?international%20ages")
fetch_macrostrat <- function(path, query = list(), ...) {
# Define root of API
root <- "https://macrostrat.org/api/"
# Is Macrostrat and user online?
tryCatch(
{
nslookup("macrostrat.org")
},
error = function(e) {
stop("Macrostrat is unavailable or you have no internet connection.")
})
# query handle
if (length(query) == 0) query <- NULL
# Build url
url_build <- paste0(root, path, query)
url_build <- gsub(" ", "%20", url_build)
# Fetch data
dat <- GET(url = url)
# Extract content
dat <- content(dat, as = "text", encoding = "UTF-8")
dat <- fromJSON(dat)
# Return data
return(dat)
}
path <- "defs/intervals?format=csv&timescale="
query <- "International Ages"
# Define root of API
root <- "https://macrostrat.org/api/"
# Is Macrostrat and user online?
tryCatch(
{
nslookup("macrostrat.org")
},
error = function(e) {
stop("Macrostrat is unavailable or you have no internet connection.")
})
# query handle
if (length(query) == 0) query <- NULL
# Build url
url_build <- paste0(root, path, query)
url_build
url_build <- gsub(" ", "%20", url_build)
url_build
# Fetch data
dat <- GET(url = url)
# Build url
request <- paste0(root, path, query)
request <- gsub(" ", "%20", request)
# Fetch data
dat <- GET(url = request)
# Extract content
dat <- content(dat, as = "text", encoding = "UTF-8")
dat <- fromJSON(dat)
dat
# Build url
request <- paste0(root, path, query)
request <- gsub(" ", "%20", request)
# Fetch data
dat <- GET(url = request)
# Extract content
dat <- content(dat, as = "text", encoding = "UTF-8")
dat
dat
# Fetch data
dat <- GET(url = request)
dat
# Extract content
dat <- content(dat, as = "text", encoding = "UTF-8")
dat
path <- "defs/intervals?format=json&timescale="
query <- "International Ages"
fetch_macrostrat(path = path, query = query)
# Define root of API
root <- "https://macrostrat.org/api/"
# Is Macrostrat and user online?
tryCatch(
{
nslookup("macrostrat.org")
},
error = function(e) {
stop("Macrostrat is unavailable or you have no internet connection.")
})
# query handle
if (length(query) == 0) query <- NULL
# Build url
request <- paste0(root, path, query)
request <- gsub(" ", "%20", request)
# Fetch data
dat <- GET(url = request)
# Extract content
dat <- content(dat, as = "text", encoding = "UTF-8")
dat <- fromJSON(dat)
dat
unlist(dat)
dat$success
dat[[1]]
test <- dat[[1]]
test
path <- "defs/intervals?format=csv&timescale="
query <- "International Ages"
fetch_macrostrat(path = path, query = query)
# Define root of API
root <- "https://macrostrat.org/api/"
# Is Macrostrat and user online?
tryCatch(
{
nslookup("macrostrat.org")
},
error = function(e) {
stop("Macrostrat is unavailable or you have no internet connection.")
})
# query handle
if (length(query) == 0) query <- NULL
# Build url
request <- paste0(root, path, query)
request <- gsub(" ", "%20", request)
# Fetch data
dat <- GET(url = request)
# Extract content
dat <- content(dat, as = "text", encoding = "UTF-8")
dat
# Fetch data
dat <- GET(url = request)
?content
content(dat)
content(dat, as = "text")
content(dat, as = "raw", encoding = "UTF-8")
content(dat, as = "parsed", encoding = "UTF-8")
# Extract content
dat <- content(dat, as = "parsed", encoding = "UTF-8")
View(dat)
#'
#'
#' @importFrom jsonlite fromJSON
#' @importFrom httr GET content
#' @importFrom curl nslookup
#'
#' @example
#' path <- "defs/intervals?format=csv&timescale="
#' query <- "International Ages"
#' fetch_macrostrat(path = path, query = query)
fetch_macrostrat <- function(path, query = list(), format, ...) {
# Define root of API
root <- "https://macrostrat.org/api/"
# Is Macrostrat and user online?
tryCatch(
{
nslookup("macrostrat.org")
},
error = function(e) {
stop("Macrostrat is unavailable or you have no internet connection.")
})
# query handle
if (length(query) == 0) query <- NULL
# Build url
request <- paste0(root, path, query)
request <- gsub(" ", "%20", request)
# Fetch data
dat <- GET(url = request)
# Extract content
if (format == "csv") {
dat <- content(dat, as = "parsed", encoding = "UTF-8")
}
else if (format == "json") {
dat <- fromJSON(dat)
}
# Return data
return(dat)
}
path <- "defs/intervals?format=csv&timescale="
query <- "International Ages"
#'
#'
#' @importFrom jsonlite fromJSON
#' @importFrom httr GET content
#' @importFrom curl nslookup
#'
#' @example
#' path <- "defs/intervals?format=csv&timescale="
#' query <- "International Ages"
#' fetch_macrostrat(path = path, query = query, format = "csv")
fetch_macrostrat <- function(path, query = list(), format = "csv", ...) {
# Define root of API
root <- "https://macrostrat.org/api/"
# Is Macrostrat and user online?
tryCatch(
{
nslookup("macrostrat.org")
},
error = function(e) {
stop("Macrostrat is unavailable or you have no internet connection.")
})
# query handle
if (length(query) == 0) query <- NULL
# Build url
request <- paste0(root, path, query)
request <- gsub(" ", "%20", request)
# Fetch data
dat <- GET(url = request)
# Extract content
if (format == "csv") {
dat <- content(dat, as = "parsed", encoding = "UTF-8")
}
else if (format == "json") {
dat <- fromJSON(dat)
}
# Return data
return(dat)
}
fetch_macrostrat(path = path, query = query, format = "csv")
query <- "International Periods"
fetch_macrostrat(path = path, query = query, format = "csv")
document()
document()
document()
document()
document()
document()
load_all()
?fetch_macrostrat
timescale = "International Periods"
path <- "defs/intervals?format=csv&timescale="
fetch_macrostrat(path = path, query = timescale)
get_timescale <- function(timescale = "International Periods") {
path <- "defs/intervals?format=csv&timescale="
dat <- fetch_macrostrat(path = path, query = timescale)
return(dat)
}
get_timescale(timescale = "International Stages")
get_timescale(timescale = "International Ages")
load_all()
get_timescale <- function(timescale = "International Periods") {
path <- "defs/intervals?format=csv&timescale="
dat <- fetch_macrostrat(path = path, query = timescale)
return(dat)
}
get_timescale(timescale = "International Ages")
load_all()
path <- "defs/intervals?format=csv&timescale="
dat <- fetch_macrostrat(path = path, query = timescale)
load_all()
get_timescale(timescale = "International Ages")
test <- get_timescale(timescale = "International Ages")
View(test)
path <- "defs/timescales?all"
fetch_macrostrat(path)
names(fetch_macrostrat(path))
path <- "defs/timescales?all"
# Define root of API
root <- "https://macrostrat.org/api/"
# Is Macrostrat and user online?
tryCatch(
{
nslookup("macrostrat.org")
},
error = function(e) {
stop("Macrostrat is unavailable or you have no internet connection.")
})
# Build url
request <- paste0(root, path, query)
request <- gsub(" ", "%20", request)
path
query <- NULL
# Build url
request <- paste0(root, path, query)
request <- gsub(" ", "%20", request)
# Fetch data
dat <- GET(url = request)
fromJSON(dat)
# Fetch data
dat <- GET(url = request)
dat
dat <- data.frame(content(dat, as = "text", encoding = "UTF-8")
dat <- fromJSON(dat)
# Fetch data
dat <- GET(url = request)
dat <- content(dat, as = "text", encoding = "UTF-8")
dat
dat <- fromJSON(dat)
dat
valid_scale <- "defs/timescales?all"
fetch_macrostrat(path, format = "json")
valid_scale <- "defs/timescales?all"
valid_scale <- "defs/timescales?all"
fetch_macrostrat(path, format = "json")
fetch_macrostrat(path = valid_scale, format = "json")
query = NULL
# Define root of API
root <- "https://macrostrat.org/api/"
# Is Macrostrat and user online?
tryCatch(
{
nslookup("macrostrat.org")
},
error = function(e) {
stop("Macrostrat is unavailable or you have no internet connection.")
})
# Build url
request <- paste0(root, path, query)
path <- "defs/timescales?all"
fetch_macrostrat(path = path, format = "json")
# Build url
request <- paste0(root, path, query)
request <- gsub(" ", "%20", request)
# Fetch data
dat <- GET(url = request)
format = "json"
dat <- content(dat, as = "text", encoding = "UTF-8")
dat <- fromJSON(dat)
load_all()
path <- "defs/timescales?all"
fetch_macrostrat(path = path, format = "json")
available_scales <- "defs/timescales?all"
available_scales <- fetch_macrostrat(path = path, format = "json")
available_scales <- "defs/timescales?all"
available_scales <- fetch_macrostrat(path = path, format = "json")[[1]]
available_scales
available_scales <- "defs/timescales?all"
available_scales <- fetch_macrostrat(path = path, format = "json")
available_scales
unlist(available_scales)
available_scales
data.frame(available_scales)
available_scales <- "defs/timescales?all"
available_scales <- data.frame(fetch_macrostrat(path = path,
query = NULL,
format = "json"))
available_scales
load_all()
available_scales <- "defs/timescales?all"
available_scales <- data.frame(fetch_macrostrat(path = path,
query = NULL,
format = "json"))
load_all()
available_scales <- "defs/timescales?all"
available_scales <- data.frame(fetch_macrostrat(path = path,
query = NULL,
format = "json"))
load_all()
available_scales <- "defs/timescales?all"
available_scales <- data.frame(fetch_macrostrat(path = path,
query = NULL,
format = "json"))
available_scales
available_scales$success.data.timescale
# Check which scales are available
available_scales <- "defs/timescales?all"
available_scales <- data.frame(fetch_macrostrat(path = path,
query = NULL,
format = "json"))
available_scales <- available_scales$success.data.timescale
# Check which scales are available
available_scales <- "defs/timescales?all"
available_scales <- data.frame(fetch_macrostrat(path = path,
query = NULL,
format = "json"))
available_scales <- available_scales$success.data.timescale
timescale
timescale <- "International Ages"
# Match available scales
charmatch(x = timescale, table = available_scales)
timescale
available_scales
# Match available scales
charmatch(x = timescale, table = available_scales)
timescale <- "international ages"
# Match available scales
charmatch(x = timescale, table = available_scales)
# Lower case timescale
timescale <- tolower(timescale)
timescale
# Match available scales
charmatch(x = timescale, table = available_scales)
?charmatch
stop(paste0("No scale matched. Choose from:",
available_scales))
stop(paste0("No scale matched. Choose from:",
toString(available_scales)))
stop(paste("No scale matched. Choose from:",
toString(available_scales)))
get_timescale <- function(timescale = "International Periods") {
# Check which scales are available
available_scales <- "defs/timescales?all"
available_scales <- data.frame(fetch_macrostrat(path = path,
query = NULL,
format = "json"))
available_scales <- available_scales$success.data.timescale
# Lower case timescale
timescale <- tolower(timescale)
# Match available scales
mch <- charmatch(x = timescale, table = available_scales)
# No match
if (is.na(mch)) {
stop(paste("No scale matched. Choose from:",
toString(available_scales)))
}
# Use matched scale
timescale <- available_scales[mch]
# Get user request
path <- "defs/intervals?format=csv&timescale="
dat <- fetch_macrostrat(path = path, query = timescale, format = "csv")
return(dat)
}
get_timescale(timescale = "International Periods")
get_timescale(timescale = "International Ages")
get_timescale(timescale = "Ages")
get_timescale(timescale = "iternational ages")
get_timescale(timescale = "international")
test <- get_timescale(timescale = "international")
View(test)
timescale = "international"
# Check which scales are available
available_scales <- "defs/timescales?all"
available_scales <- data.frame(fetch_macrostrat(path = path,
query = NULL,
format = "json"))
available_scales <- available_scales$success.data.timescale
available_scales
# Lower case timescale
timescale <- tolower(timescale)
# Match available scales
mch <- charmatch(x = timescale, table = available_scales)
mch
get_timescale <- function(timescale = "International Periods") {
# Check which scales are available
available_scales <- "defs/timescales?all"
available_scales <- data.frame(fetch_macrostrat(path = path,
query = NULL,
format = "json"))
available_scales <- available_scales$success.data.timescale
# Lower case timescale
timescale <- tolower(timescale)
# Match available scales
mch <- charmatch(x = timescale, table = available_scales)
# No match
if (is.na(mch) || mch == 0) {
stop(paste("No scale matched. Choose from:",
toString(available_scales)))
}
# Use matched scale
timescale <- available_scales[mch]
# Get user request
path <- "defs/intervals?format=csv&timescale="
dat <- fetch_macrostrat(path = path, query = timescale, format = "csv")
return(dat)
}
test <- get_timescale(timescale = "international")
document()
document()
document()
document()
load_all()
get_timescale()
load_all
load_all()
get_timescale()
document()
load_all()
get_timescale()
load_all()
get_timescale()
get_timescale(x = "international age")
document()
load_all()
document()
?get_timescale
?palaeoverse::axis_geo
document()
?get_timescale
document()
?get_timescale
document()
?get_timescale
library(devtools)
document()
load_all()
library(rmacrostrat)
?get_timescale
document()
document()
load_all()
get_timescale()
document()
load_all()
get_timescale()
document()
load_all()
get_timescale()
test <- get_timescale()
View(test)
