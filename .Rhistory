# Build url
request <- paste0(root, path, query)
request <- gsub(" ", "%20", request)
path
query <- NULL
# Build url
request <- paste0(root, path, query)
request <- gsub(" ", "%20", request)
# Fetch data
dat <- GET(url = request)
fromJSON(dat)
# Fetch data
dat <- GET(url = request)
dat
dat <- data.frame(content(dat, as = "text", encoding = "UTF-8")
dat <- fromJSON(dat)
# Fetch data
dat <- GET(url = request)
dat <- content(dat, as = "text", encoding = "UTF-8")
dat
dat <- fromJSON(dat)
dat
valid_scale <- "defs/timescales?all"
fetch_macrostrat(path, format = "json")
valid_scale <- "defs/timescales?all"
valid_scale <- "defs/timescales?all"
fetch_macrostrat(path, format = "json")
fetch_macrostrat(path = valid_scale, format = "json")
query = NULL
# Define root of API
root <- "https://macrostrat.org/api/"
# Is Macrostrat and user online?
tryCatch(
{
nslookup("macrostrat.org")
},
error = function(e) {
stop("Macrostrat is unavailable or you have no internet connection.")
})
# Build url
request <- paste0(root, path, query)
path <- "defs/timescales?all"
fetch_macrostrat(path = path, format = "json")
# Build url
request <- paste0(root, path, query)
request <- gsub(" ", "%20", request)
# Fetch data
dat <- GET(url = request)
format = "json"
dat <- content(dat, as = "text", encoding = "UTF-8")
dat <- fromJSON(dat)
load_all()
path <- "defs/timescales?all"
fetch_macrostrat(path = path, format = "json")
available_scales <- "defs/timescales?all"
available_scales <- fetch_macrostrat(path = path, format = "json")
available_scales <- "defs/timescales?all"
available_scales <- fetch_macrostrat(path = path, format = "json")[[1]]
available_scales
available_scales <- "defs/timescales?all"
available_scales <- fetch_macrostrat(path = path, format = "json")
available_scales
unlist(available_scales)
available_scales
data.frame(available_scales)
available_scales <- "defs/timescales?all"
available_scales <- data.frame(fetch_macrostrat(path = path,
query = NULL,
format = "json"))
available_scales
load_all()
available_scales <- "defs/timescales?all"
available_scales <- data.frame(fetch_macrostrat(path = path,
query = NULL,
format = "json"))
load_all()
available_scales <- "defs/timescales?all"
available_scales <- data.frame(fetch_macrostrat(path = path,
query = NULL,
format = "json"))
load_all()
available_scales <- "defs/timescales?all"
available_scales <- data.frame(fetch_macrostrat(path = path,
query = NULL,
format = "json"))
available_scales
available_scales$success.data.timescale
# Check which scales are available
available_scales <- "defs/timescales?all"
available_scales <- data.frame(fetch_macrostrat(path = path,
query = NULL,
format = "json"))
available_scales <- available_scales$success.data.timescale
# Check which scales are available
available_scales <- "defs/timescales?all"
available_scales <- data.frame(fetch_macrostrat(path = path,
query = NULL,
format = "json"))
available_scales <- available_scales$success.data.timescale
timescale
timescale <- "International Ages"
# Match available scales
charmatch(x = timescale, table = available_scales)
timescale
available_scales
# Match available scales
charmatch(x = timescale, table = available_scales)
timescale <- "international ages"
# Match available scales
charmatch(x = timescale, table = available_scales)
# Lower case timescale
timescale <- tolower(timescale)
timescale
# Match available scales
charmatch(x = timescale, table = available_scales)
?charmatch
stop(paste0("No scale matched. Choose from:",
available_scales))
stop(paste0("No scale matched. Choose from:",
toString(available_scales)))
stop(paste("No scale matched. Choose from:",
toString(available_scales)))
get_timescale <- function(timescale = "International Periods") {
# Check which scales are available
available_scales <- "defs/timescales?all"
available_scales <- data.frame(fetch_macrostrat(path = path,
query = NULL,
format = "json"))
available_scales <- available_scales$success.data.timescale
# Lower case timescale
timescale <- tolower(timescale)
# Match available scales
mch <- charmatch(x = timescale, table = available_scales)
# No match
if (is.na(mch)) {
stop(paste("No scale matched. Choose from:",
toString(available_scales)))
}
# Use matched scale
timescale <- available_scales[mch]
# Get user request
path <- "defs/intervals?format=csv&timescale="
dat <- fetch_macrostrat(path = path, query = timescale, format = "csv")
return(dat)
}
get_timescale(timescale = "International Periods")
get_timescale(timescale = "International Ages")
get_timescale(timescale = "Ages")
get_timescale(timescale = "iternational ages")
get_timescale(timescale = "international")
test <- get_timescale(timescale = "international")
View(test)
timescale = "international"
# Check which scales are available
available_scales <- "defs/timescales?all"
available_scales <- data.frame(fetch_macrostrat(path = path,
query = NULL,
format = "json"))
available_scales <- available_scales$success.data.timescale
available_scales
# Lower case timescale
timescale <- tolower(timescale)
# Match available scales
mch <- charmatch(x = timescale, table = available_scales)
mch
get_timescale <- function(timescale = "International Periods") {
# Check which scales are available
available_scales <- "defs/timescales?all"
available_scales <- data.frame(fetch_macrostrat(path = path,
query = NULL,
format = "json"))
available_scales <- available_scales$success.data.timescale
# Lower case timescale
timescale <- tolower(timescale)
# Match available scales
mch <- charmatch(x = timescale, table = available_scales)
# No match
if (is.na(mch) || mch == 0) {
stop(paste("No scale matched. Choose from:",
toString(available_scales)))
}
# Use matched scale
timescale <- available_scales[mch]
# Get user request
path <- "defs/intervals?format=csv&timescale="
dat <- fetch_macrostrat(path = path, query = timescale, format = "csv")
return(dat)
}
test <- get_timescale(timescale = "international")
document()
document()
document()
document()
load_all()
get_timescale()
load_all
load_all()
get_timescale()
document()
load_all()
get_timescale()
load_all()
get_timescale()
get_timescale(x = "international age")
document()
load_all()
document()
?get_timescale
?palaeoverse::axis_geo
document()
?get_timescale
document()
?get_timescale
document()
?get_timescale
library(devtools)
document()
load_all()
library(rmacrostrat)
?get_timescale
document()
document()
load_all()
get_timescale()
document()
load_all()
get_timescale()
document()
load_all()
get_timescale()
test <- get_timescale()
View(test)
# Get user request
path <- "grids/"
query <- c("latitude?lngSpacing=5&latSpacing=12&format=geojson_bare")
install.packages("geojsonsf")
# Define root of API
root <- "https://macrostrat.org/api/"
# Is Macrostrat and user online?
tryCatch(
{
nslookup("macrostrat.org")
},
error = function(e) {
stop("Macrostrat is unavailable or you have no internet connection.")
})
nslookup("macrostrat.org")
library(curl)
library(geojsonsf)
library(httr)
# Define root of API
root <- "https://macrostrat.org/api/"
# Is Macrostrat and user online?
tryCatch(
{
nslookup("macrostrat.org")
},
error = function(e) {
stop("Macrostrat is unavailable or you have no internet connection.")
})
# Build url
request <- paste0(root, path, query)
request <- gsub(" ", "%20", request)
# Fetch data
dat <- GET(url = request)
dat
format <- "geojson"
content(dat, as = "text", encoding = "UTF-8")
dat
dat <- content(dat, as = "text", encoding = "UTF-8")
geojsonsf::geojson_sfc(dat)
test <- geojsonsf::geojson_sfc(dat)
test
library(sf)
plot(test)
test <- geojsonsf::geojson_sf(dat)
test
test
plot(test)
query <- c("latitude?lngSpacing=5&latSpacing=12&format=geojson")
# Build url
request <- paste0(root, path, query)
request <- gsub(" ", "%20", request)
# Fetch data
dat <- GET(url = request)
dat <- content(dat, as = "text", encoding = "UTF-8")
dat <- geojsonsf::geojson_sf(dat)
dat
dat <- content(dat, encoding = "UTF-8")
dat <- content(dat)
# Fetch data
dat <- GET(url = request)
dat <- content(dat)
dat <- geojsonsf::geojson_sf(dat)
dat
# Fetch data
dat <- GET(url = request)
dat
dat <- geojsonsf::geojson_sf(dat)
?content
# Fetch data
dat <- GET(url = request)
dat <- content(dat, as = "parsed", encoding = "UTF-8")
dat <- geojsonsf::geojson_sf(dat)
query <- c("latitude?lngSpacing=5&latSpacing=12&format=geojson_bare")
dat <- content(dat, as = "parsed", encoding = "UTF-8")
dat <- geojsonsf::geojson_sf(dat)
root <- function() "https://macrostrat.org/api/"
library(httr)
GET(url = "https://macrostrat.org/api")
ver <- GET(url = "https://macrostrat.org/api")
ver <- content(ver, as = "text", encoding = "UTF-8")
ver
library(jsonlite)
library(httr)
root <- function() "https://macrostrat.org/api/"
ver <- GET(url = "https://macrostrat.org/api")
ver <- content(ver, as = "text", encoding = "UTF-8")
ver <- fromJSON(ver)
ver
#' @importFrom jsonlite fromJSON
#' @importFrom httr GET content
api_ver <- function() {
ver <- GET(url = "https://macrostrat.org/api")
ver <- content(ver, as = "text", encoding = "UTF-8")
ver <- fromJSON(ver)$success$v
}
api_ver()
#' @importFrom jsonlite fromJSON
#' @importFrom httr GET content
api_ver <- function() {
ver <- GET(url = "https://macrostrat.org/api")
ver <- content(ver, as = "text", encoding = "UTF-8")
ver <- fromJSON(ver)$success$v
ver
}
api_ver()
root <- function() "https://macrostrat.org/api/"
#' @importFrom jsonlite fromJSON
#' @importFrom httr GET content
api_ver <- function() {
ver <- GET(url = root)
ver <- content(ver, as = "text", encoding = "UTF-8")
ver <- fromJSON(ver)$success$v
ver
}
api_ver()
root <- function() "https://macrostrat.org/api/"
root
root <- function() return("https://macrostrat.org/api/")
root
root <- function() "https://macrostrat.org/api/"
root
print(root)
root <- function() {"https://macrostrat.org/api/"}
root
root <- function() {
return("https://macrostrat.org/api/")
}
root
root()
root <- function() "https://macrostrat.org/api/"
root()
# API root
root <- function() "https://macrostrat.org/api/"
# API version
#' @importFrom jsonlite fromJSON
#' @importFrom httr GET content
api_ver <- function() {
ver <- GET(url = root)
ver <- content(ver, as = "text", encoding = "UTF-8")
ver <- fromJSON(ver)$success$v
ver
}
api_ver()
# API root
root <- function() "https://macrostrat.org/api/"
# API version
#' @importFrom jsonlite fromJSON
#' @importFrom httr GET content
api_ver <- function() {
ver <- GET(url = root())
ver <- content(ver, as = "text", encoding = "UTF-8")
ver <- fromJSON(ver)$success$v
ver
}
api_ver()
# API root
root <- function() "https://macrostrat.org/api/"
# API version
#' @importFrom jsonlite fromJSON
#' @importFrom httr GET content
api_ver <- function() {
ver <- GET(url = root())
ver <- content(ver, as = "text", encoding = "UTF-8")
ver <- fromJSON(ver)$success$v
ver <- paste0("v", ver)
}
api_ver()
# API root
root <- function() "https://macrostrat.org/api/"
# API version
#' @importFrom jsonlite fromJSON
#' @importFrom httr GET content
api_ver <- function() {
ver <- GET(url = root())
ver <- content(ver, as = "text", encoding = "UTF-8")
ver <- fromJSON(ver)$success$v
ver <- paste0("v", ver)
ver
}
api_ver()
library(devtools)
document()
document()
document()
load_all()
get_timescale()
scale <- "international periods"
# Error handling
if (!is.character(scale)) {
stop("`scale` must be of class character.")
}
# Check which scales are available
available_scales <- "defs/timescales?all"
available_scales <- data.frame(fetch_macrostrat(path = available_scales,
query = NULL,
format = "json"))
available_scales
# Check which scales are available
available_scales <- "defs/timescales?all"
# Is Macrostrat and user online?
tryCatch(
{
nslookup("macrostrat.org")
},
error = function(e) {
stop("Macrostrat is unavailable or you have no internet connection.")
})
# Check which scales are available
path <- "defs/timescales?all"
query = NULL
# Build url
request <- paste0(root(), api_ver(), path, query)
request
load_all()
document()
load_all()
fetch_macrostrat()
# Check which scales are available
path <- "defs/timescales?all"
available_scales <- data.frame(fetch_macrostrat(path = path,
query = NULL,
format = "json"))
available_scales
# Check which scales are available
path <- "defs/timescales?all"
available_scales <- data.frame(fetch_macrostrat(path = path,
query = NULL,
format = "json"))
available_scales <- available_scales$success.data.timescale
# Lower case timescale
scale <- tolower(scale)
# Match available scales
mch <- charmatch(x = scale, table = available_scales)
# No match
if (is.na(mch) || mch == 0) {
stop(paste("No scale matched. Choose from:",
toString(available_scales)))
}
# Use matched scale
scale <- available_scales[mch]
scale
# Get user request
path <- "defs/intervals?format=csv&timescale="
scale
path
dat <- fetch_macrostrat(path = path, query = scale, format = "csv")
dat
# Clean up data
dat <- dat[, -which(colnames(dat) %in% c("int_id", "timescales"))]
document()
load_all()
get_timescale()
document()
document()
document()
?get_timescale
document()
?get_timescale
document()
get_timescale(available = TRUE)
document()
document()
document()
document()
load_all()
get_timescale()
library(rmacrostrat)
document()
?rmacrostrat
document()
load_all()
?rmacrostrat
document()
load_All()
load_all()
?rmacrostrat
document()
load_all()
?rmacrostrat
document()
