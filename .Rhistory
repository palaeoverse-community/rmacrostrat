args <- list(route, path)
# Remove NULL arguments
args <- args[!sapply(args, is.null)]
# Generate list
args <- list(route, path)
# Remove NULL arguments
args <- args[!sapply(args, is.null)]
# Set path
path <- do.call(paste, args)
path <- gsub(pattern = " ", replacement = "/", x = path)
path
# Get content
cont <- GET_macrostrat(path = path)
cont <- httr::content(cont)
cont <- cont$success$options[x]
cont
x = "parameters"
path
# Get content
cont <- GET_macrostrat(path = path)
cont <- httr::content(cont)
cont <- cont$success$options[x]
cont
unlist(cont)
route <- "defs"
path <- "timescales"
# Generate list
args <- list(route, path)
# Remove NULL arguments
args <- args[!sapply(args, is.null)]
# Set path
path <- do.call(paste, args)
path <- gsub(pattern = " ", replacement = "/", x = path)
# Get content
cont <- GET_macrostrat(path = path)
cont <- httr::content(cont)
cont <- cont$success$options[x]
cont
# Get content
cont <- GET_macrostrat(path = path)
cont <- httr::content(cont)
dat <- cont$success$options[x]
dat
cont$success$options
document()
check_options()
x = NULL
route = NULL
path = NULL
# Generate list
args <- list(route, path)
# Remove NULL arguments
args <- args[!sapply(args, is.null)]
# Set path
path <- do.call(paste, args)
path <- gsub(pattern = " ", replacement = "/", x = path)
GET_macrostrat(path = path)
cont <- httr::content(cont)
# Get content
cont <- GET_macrostrat(path = path)
httr::content(cont)
cont <- httr::content(cont)
cont$success
$options
cont$success
cont$success$options
dat <- cont$success$routes
dat
document()
get_options()
get_options(route = "grids")
get_options(route = "grids", path = "lithologies")
get_options(route = "grids", path = "latitude")
get_options(x = "parameters", route = "grids", path = "latitude")
route = "grids"
path = "latitude"
# Generate list
args <- list(route, path)
# Remove NULL arguments
args <- args[!sapply(args, is.null)]
# Set path
path <- do.call(paste, args)
path <- gsub(pattern = " ", replacement = "/", x = path)
# Get content
cont <- GET_macrostrat(path = path)
cont <- httr::content(cont)
x
dat
path
# Get content
cont <- GET_macrostrat(path = path)
cont <- httr::content(cont)
cont$success$options[x]
cont$success$options
x
cont$success$options
cont$success$options[""]
cont$success$options[x]
# Get content
cont <- GET_macrostrat(path = path)
cont <- httr::content(cont)
cont
x
cont$success$options
document()
get_options()
get_options(route = "defs")
get_options(route = "defs", path = "refs")
get_options(x = "parameters", route = "defs", path = "refs")
document()
check_options()
load_all()
get_options()
get_options(route = "defs", query = "languages")
get_options(route = "defs", path = "languages")
# Check which scales are available
path <- "defs/timescales?all"
var <- "timescale"
get_available_content(x = x, path = path,
var = var, available = TRUE)
var
get_options(route = "defs")
get_options(route = "defs", path = "timescale")
get_options(route = "defs", path = "timescales")
path
# Check which scales are available
path <- "defs/timescales?all"
GET_macrostrat(path = path)
GET_macrostrat(path = path, query = "all")
GET_macrostrat(path = path, query = list(all = "all"))
GET_macrostrat(path = path, query = list(all = "all", format = "csv"))
# Check which scales are available
path <- "defs/timescales"
scales <- GET_macrostrat(path = path,
query = list(all = "all", format = "csv"))
scales
x
x
x = "international ages"
# Check which scales are available
path <- "defs/timescales"
# Check which scales are available
path <- "defs/timescales"
x
available = TRUE
query = "all"
query
path
GET_macrostrat(path = path, query = query)
query = list(all = "all", format = "csv")
query
path
GET_macrostrat(path = path, query = query)
# Is data available?
content <- GET_macrostrat(path = path, query = query)
content
x
path
route = "defs"
path = "timescales"
query = list(all = "all", format = "csv")
# Is data available?
content <- GET_macrostrat(route = route, path = path, query = query)
route
path
query
?GET_macrostrat
x <- get_available_content(x = x, path = "defs/timescales",
query = list(all = "all", format = "csv"),
available = TRUE)
x
path = "defs/timescales"
GET_macrostrat(path = path, query = query)
query
path
# Is data available?
content <- GET_macrostrat(path = path, query = query)
content
var
content$success$data[, var]
var
content[, var]
# Is data available?
content <- GET_macrostrat(path = path, query = query)
content <- content[, var]
available
unique(content)
x
x <- "international ages"
# Match available content
mch <- charmatch(x = x, table = content)
mch
stop(paste(x, "not found. ",
"Set `available` to TRUE to return available content."))
load_all()
x
get_available_content(x = x, path = "defs/timescales",
query = list(all = "all", format = "csv"),
available = TRUE)
get_available_content(x = x, path = "defs/timescales",
query = list(all = "all", format = "csv"),
var = "timescale",
available = TRUE)
get_available_content(x = x, path = "defs/timescales",
query = list(all = "all", format = "csv"),
var = "timescale",
available = FALSE)
# Define path
path <- "defs/timescales"
# Define variable
var <- "timescale"
# Define query
query <- list(all = "all", format = format)
x <- get_available_content(x = x, path = path,
query = query,
var = var,
available = TRUE)
x
path
var
query
# Define query
query <- list(all = "all", format = format)
query
# Define query
query <- list(all = "all", format = "csv")
get_available_content(x = x, path = path,
query = query,
var = var,
available = TRUE)
# Get user request
path <- "defs/intervals"
query <- list(timescale = x, format = "csv")
GET_macrostrat(path = path, query = query)
dat[, -which(colnames(dat) %in% c("int_id", "timescales"))]
dat <- GET_macrostrat(path = path, query = query)
dat[, -which(colnames(dat) %in% c("int_id", "timescales"))]
dat
abbreviate(names.arg = dat$name, minlength = 2)
document()
load_all()
get_timescale(available = TRUE)
get_timescale(available = FALSE)
document()
load_all()
get_timescale()
# Define path
path <- "defs/timescales"
# Define variable
var <- "timescale"
# Define query
query <- list(all = "all", format = "csv")
x <- get_available_content(x = x, path = path,
query = query,
var = var,
available = TRUE)
x
# Get matched content
x <- get_available_content(x = x, path = path,
var = var, available = FALSE)
document()
load_all()
get_timescale(available = TRUE)
get_timescale(available = FALSE)
document()
get_timescale(available = FALSE)
document()
get_timescale(available = FALSE)
load_all()
get_timescale(available = FALSE)
?get_timescale
library(devtools)
document()
?get_timescale
library(rmacrostrat)
?get_timescale
document()
library(rmacrostrat)
get_stats()
document()
get_stats
load_all()
get_stats()
# Define options
path <- "stats"
query <- list(all = "all", format = "csv")
# Get content
dat <- GET_macrostrat(path = path, query = query)
dat
get_available_content(x = x, path = path, query = query)
get_available_content(x = x, path = path)
# Get content
dat <- GET_macrostrat(path = path, query = query)
dat
# Check which projects are available
if (available) {
dat <- dat$project
return(dat)
}
document()
get_stats()
document()
get_stats()
get_timescale()
get_stats()
get_stats(available = TRUE)
# Check which lithologies are available
# Define path
path <- "defs/lithologies"
# Define variable
var <- "timescale"
# Define query
query <- list(all = "all", format = "csv")
by <- "name"
# Define var
var <- by
get_available_content(x = x, path = path,
var = var, available = TRUE)
path
get_available_content(x = x, path = path, query = query,
var = var, available = TRUE)
GET_macrostrat(path = path, query = query)
by
query
query <- append(query, by, after = length(query))
query
GET_macrostrat(path = path, query = query)
names(query)[length(query)]
names(query)[length(query)] <- "by"
query
GET_macrostrat(path = path, query = query)
get_lithology()
x
by
x <- "sandstone"
# Error handling
if (!is.character(x) && !is.null(x)) {
stop("`x` must be of character class.")
}
if (!is.logical(available)) {
stop("`available` must be of logical class.")
}
# Check which lithologies are available
# Define path
path <- "defs/lithologies"
# Define variable
var <- "timescale"
# Define query
query <- list(all = "all", format = "csv")
query
get_available_content(x = x, path = path, query = query,
var = var, available = TRUE)
# Define var
var <- by
get_available_content(x = x, path = path, query = query,
var = var, available = TRUE)
by
by
query
by
?append
# Get user request
#path <- paste0("defs/lithologies?format=csv&", by, "=")
query <- append(query, by, after = length(query))
names(query)[length(query)] <- "by"
query
dat <- GET_macrostrat(path = path, query = query)
dat
View(dat)
GET_macrostrat(path = path, query = query)
query
names(query)[length(query)] <- by
query
GET_macrostrat(path = path, query = query)
by
x
query
# Define query
query <- list(all = "all", format = "csv")
# Get user request
#path <- paste0("defs/lithologies?format=csv&", by, "=")
query <- append(query, x, after = length(query))
names(query)[length(query)] <- by
query
dat <- GET_macrostrat(path = path, query = query)
dat
path
query
query["all"]
names(query["all"])
by
# Define query
query <- list(all = "all", format = "csv")
names(query["all"]) <- by
query[by] <- x
query
# Define query
query <- list(all = "all", format = "csv")
query
names(query["all"])
by
names(query["all"]) <- by
query
query["all"]
names(query["all"])
names(query["all"]) <- by
query
which(names(query) == "all")
names(query[which(names(query) == "all")])
which(names(query) == "all")
names(query)[which(names(query) == "all")] <- by
query
query[by] <- x
query
dat <- GET_macrostrat(path = path, query = query)
dat
query
# Define query
query <- list(all = "all", format = "csv")
# Define var
var <- by
# Set API
if (by == "name") {
by <- "lith"
} else {
by <- paste0("lith_", by)
}
names(query)[which(names(query) == "all")] <- by
query[by] <- x
query
GET_macrostrat(path = path, query = query)
load_all()
get_lithology()
get_lithology(x = "sandstone")
get_lithology(x = "marl")
get_lithology(x = "sandstone")
get_lithology(x = "sandstone", by = "type")
get_lithology(x = "sandstone", by = "group")
get_lithology(x = "siliclastic", by = "type")
get_lithology(x = "siliciclastic", by = "type")
get_lithology(x = "unconsolidated", by = "group")
get_lithology(by = "group")
x
# Check which lithologies are available
# Define path
path <- "defs/lithologies"
# Define variable
var <- "timescale"
# Define query
query <- list(all = "all", format = "csv")
get_available_content(x = x, path = path, query = query,
var = var, available = FALSE)
var
path
query
x
get_available_content(x = x, path = path, query = query,
var = NULL, available = FALSE)
get_available_content(x = x, path = path, query = query,
var = NULL, available = TRUE)
get_available_content(x = x, path = path, query = query,
var = var, available = TRUE)
by
by <- "name"
query
get_available_content(x = x, path = path, query = query,
var = by, available = TRUE)
get_available_content(x = x, path = path, query = query,
var = by, available = FALSE)
x
x <- "sanstone"
get_available_content(x = x, path = path, query = query,
var = by, available = FALSE)
load_all()
sandstone
x
x <- "sandstne"
get_available_content(x = x, path = path, query = query,
var = by, available = FALSE)
x
path
query
# Is data available?
content <- GET_macrostrat(path = path, query = query)
content <- content[, var]
var
var <- "name"
# Is data available?
content <- GET_macrostrat(path = path, query = query)
content <- content[, var]
content
content
x
charmatch(x = x, table = content)
x <- "sandstone"
charmatch(x = x, table = content)
x <- "sandston"
charmatch(x = x, table = content)
x <- "sand"
charmatch(x = x, table = content)
document()
load_all()
get_stats()
get_lithology()
document()
load_all()
get_lithology()
document()
document()
document()
load_all()
?get_lithology
